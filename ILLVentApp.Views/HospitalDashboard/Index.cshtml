@{
    ViewData["Title"] = "Hospital Emergency Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <style>
        .emergency-card {
            border-left: 4px solid #dc3545;
            transition: all 0.3s ease;
        }
        .emergency-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .priority-high { border-left-color: #dc3545; }
        .priority-medium { border-left-color: #ffc107; }
        .priority-low { border-left-color: #28a745; }
        
        .stats-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 10px;
        }
        
        .btn-accept {
            background: linear-gradient(135deg, #28a745, #20c997);
            border: none;
        }
        
        .btn-reject {
            background: linear-gradient(135deg, #dc3545, #fd7e14);
            border: none;
        }
        
        .real-time-indicator {
            animation: dashboardPulse 2s infinite;
        }
        
        @keyframes dashboardPulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        
        .emergency-list {
            max-height: 600px;
            overflow-y: auto;
        }
        
        .medical-history-badge {
            background: linear-gradient(135deg, #17a2b8, #6f42c1);
        }
    </style>
</head>
<body>
    <div class="container-fluid py-4">
        <!-- Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1 class="h3 mb-0"><i class="fas fa-hospital text-primary"></i> Emergency Dashboard</h1>
                        <p class="text-muted">Real-time emergency request monitoring</p>
                    </div>
                    <div class="d-flex align-items-center">
                        <span class="badge bg-success real-time-indicator me-2">
                            <i class="fas fa-circle"></i> Live
                        </span>
                        <select id="hospitalSelect" class="form-select me-2" style="width: 200px;">
                            <option value="">Select Hospital</option>
                        </select>
                        <button class="btn btn-outline-primary" onclick="refreshDashboard()">
                            <i class="fas fa-sync-alt"></i> Refresh
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Statistics Cards -->
        <div class="row mb-4" id="statsSection">
            <div class="col-md-3">
                <div class="card stats-card">
                    <div class="card-body text-center">
                        <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                        <h3 class="mb-0" id="totalRequests">0</h3>
                        <p class="mb-0">Active Requests</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-danger text-white">
                    <div class="card-body text-center">
                        <i class="fas fa-fire fa-2x mb-2"></i>
                        <h3 class="mb-0" id="highPriorityRequests">0</h3>
                        <p class="mb-0">High Priority</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-warning text-white">
                    <div class="card-body text-center">
                        <i class="fas fa-map-marker-alt fa-2x mb-2"></i>
                        <h3 class="mb-0" id="averageDistance">0 km</h3>
                        <p class="mb-0">Avg Distance</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-info text-white">
                    <div class="card-body text-center">
                        <i class="fas fa-clock fa-2x mb-2"></i>
                        <h3 class="mb-0" id="lastUpdated">--:--</h3>
                        <p class="mb-0">Last Updated</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Emergency Requests List -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0"><i class="fas fa-ambulance text-danger"></i> Active Emergency Requests</h5>
                        <span class="badge bg-primary" id="requestCount">0 requests</span>
                    </div>
                    <div class="card-body p-0">
                        <div id="emergencyList" class="emergency-list">
                            <!-- Emergency requests will be loaded here -->
                            <div class="text-center py-5" id="noRequestsMessage">
                                <i class="fas fa-clipboard-check fa-3x text-muted mb-3"></i>
                                <p class="text-muted">No active emergency requests</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Emergency Request Detail Modal -->
    <div class="modal fade" id="emergencyDetailModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Emergency Request Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="emergencyDetailContent">
                    <!-- Detail content will be loaded here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-reject text-white" onclick="respondToEmergency(false)">
                        <i class="fas fa-times"></i> Reject
                    </button>
                    <button type="button" class="btn btn-accept text-white" onclick="respondToEmergency(true)">
                        <i class="fas fa-check"></i> Accept
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Response Modal -->
    <div class="modal fade" id="responseModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Emergency Response</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="responseForm">
                        <input type="hidden" id="responseRequestId">
                        <input type="hidden" id="responseIsAccepted">
                        
                        <div class="mb-3">
                            <label class="form-label">Response Message</label>
                            <textarea class="form-control" id="responseMessage" rows="3" 
                                placeholder="Enter response message..."></textarea>
                        </div>
                        
                        <div class="row acceptance-only">
                            <div class="col-md-6">
                                <label class="form-label">Estimated Response Time (minutes)</label>
                                <input type="number" class="form-control" id="estimatedTime" min="1" max="120" value="15">
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Ambulance Available</label>
                                <select class="form-select" id="ambulanceAvailable">
                                    <option value="true">Yes</option>
                                    <option value="false">No</option>
                                </select>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="submitResponse()">Submit Response</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
    
    <script>
        // Global variables
        let currentHospitalId = null;
        let connection = null;
        let currentRequestId = null;

        // Check authentication and authorization on page load
        function checkAuthentication() {
            const token = localStorage.getItem('authToken');
            const role = localStorage.getItem('userRole');
            
            if (!token) {
                alert('Authentication required. Redirecting to login...');
                window.location.href = '/HospitalView/Login';
                return false;
            }
            
            if (role !== 'Hospital' && role !== 'Admin') {
                alert(`Access denied. Hospital staff credentials required. Your role: ${role || 'Unknown'}`);
                window.location.href = '/HospitalView/Login';
                return false;
            }
            
            return true;
        }

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            // Check authentication first
            if (!checkAuthentication()) {
                return;
            }
            
            loadHospitals();
            setupSignalR();
            
            // Auto-refresh every 30 seconds
            setInterval(refreshDashboard, 30000);
        });

        // Load available hospitals
        async function loadHospitals() {
            try {
                const token = localStorage.getItem('authToken');
                console.log('Auth token exists:', !!token);
                console.log('User role:', localStorage.getItem('userRole'));
                
                const response = await fetch('/api/Emergency/available-hospitals', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                console.log('Response status:', response.status);
                
                if (response.ok) {
                    const result = await response.json();
                    console.log('Hospitals loaded:', result);
                    const select = document.getElementById('hospitalSelect');
                    
                    result.data.forEach(hospital => {
                        const option = document.createElement('option');
                        option.value = hospital.hospitalId;
                        option.textContent = hospital.name;
                        select.appendChild(option);
                    });
                    
                    // Auto-select first hospital if available
                    if (result.data.length > 0) {
                        select.value = result.data[0].hospitalId;
                        currentHospitalId = result.data[0].hospitalId;
                        console.log('Auto-selected hospital:', currentHospitalId, result.data[0].name);
                        refreshDashboard();
                    }
                } else {
                    const errorText = await response.text();
                    console.error('Error response:', response.status, errorText);
                    
                    if (response.status === 401) {
                        showAlert('Authentication failed. Please login again.', 'danger');
                        setTimeout(() => {
                            window.location.href = '/HospitalView/Login';
                        }, 2000);
                    } else {
                        showAlert(`Error loading hospitals: ${response.status}`, 'danger');
                    }
                }
            } catch (error) {
                console.error('Error loading hospitals:', error);
                showAlert('Error loading hospitals', 'danger');
            }
        }

        // Setup SignalR connection
        async function setupSignalR() {
            try {
                connection = new signalR.HubConnectionBuilder()
                    .withUrl("/emergencyHub", {
                        accessTokenFactory: () => localStorage.getItem('authToken')
                    })
                    .build();

                // Handle new emergency requests
                connection.on("NewEmergencyRequest", function (data) {
                    console.log("New emergency request received:", data);
                    refreshDashboard();
                    showAlert(`New emergency request from ${data.PatientLocation?.UserLatitude}, ${data.PatientLocation?.UserLongitude}`, 'warning');
                });

                // Handle hospital accepted responses
                connection.on("HospitalAccepted", function (data) {
                    console.log("Hospital accepted emergency:", data);
                    refreshDashboard();
                });

                await connection.start();
                console.log("SignalR connected");
                
                // Join hospital notifications group
                if (currentHospitalId) {
                    await connection.invoke("JoinHospitalNotifications", currentHospitalId);
                }
            } catch (error) {
                console.error("SignalR connection failed:", error);
            }
        }

        // Hospital selection change
        document.getElementById('hospitalSelect').addEventListener('change', function() {
            currentHospitalId = this.value;
            console.log('Hospital changed to:', currentHospitalId, 'Hospital name:', this.options[this.selectedIndex].text);
            
            if (currentHospitalId) {
                refreshDashboard();
                
                // Join new hospital notifications group
                if (connection) {
                    connection.invoke("JoinHospitalNotifications", parseInt(currentHospitalId));
                }
            }
        });

        // Refresh dashboard data
        async function refreshDashboard() {
            if (!currentHospitalId) return;
            
            try {
                // Load statistics
                await loadDashboardStats();
                
                // Load emergency requests
                await loadEmergencyRequests();
                
                // Update last updated time
                document.getElementById('lastUpdated').textContent = new Date().toLocaleTimeString();
                
            } catch (error) {
                console.error('Error refreshing dashboard:', error);
                showAlert('Error refreshing dashboard', 'danger');
            }
        }

        // Load dashboard statistics
        async function loadDashboardStats() {
            try {
                // Note: Dashboard stats endpoint doesn't exist yet, skip for now
                // const response = await fetch(`/api/Emergency/hospital/stats/${currentHospitalId}`, {
                //     headers: {
                //         'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                //     }
                // });
                
                // For now, just set placeholder values
                document.getElementById('totalRequests').textContent = 'N/A';
                document.getElementById('highPriorityRequests').textContent = 'N/A';
                document.getElementById('averageDistance').textContent = 'N/A';
            } catch (error) {
                console.error('Error loading dashboard stats:', error);
            }
        }

        // Load emergency requests
        async function loadEmergencyRequests() {
            try {
                console.log('Loading emergency requests for hospital ID:', currentHospitalId);
                
                const response = await fetch(`/api/Emergency/hospital/requests?hospitalId=${currentHospitalId}&radiusKm=20`, {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    }
                });
                
                if (response.ok) {
                    const result = await response.json();
                    console.log('Emergency requests loaded:', result);
                    console.log('Requests data:', result.data);
                    
                    displayEmergencyRequests(result.data);
                    document.getElementById('requestCount').textContent = `${result.count} requests`;
                } else {
                    console.error('Error loading emergency requests:', response.status);
                }
            } catch (error) {
                console.error('Error loading emergency requests:', error);
            }
        }

        // Display emergency requests
        function displayEmergencyRequests(requests) {
            const container = document.getElementById('emergencyList');
            const noRequestsMessage = document.getElementById('noRequestsMessage');
            
            // Update statistics
            updateDashboardStats(requests);
            
            if (requests.length === 0) {
                container.innerHTML = '';
                if (noRequestsMessage) {
                    container.appendChild(noRequestsMessage);
                } else {
                    // Create the no requests message if it doesn't exist
                    const newNoRequestsMessage = document.createElement('div');
                    newNoRequestsMessage.id = 'noRequestsMessage';
                    newNoRequestsMessage.className = 'text-center py-5';
                    newNoRequestsMessage.innerHTML = `
                        <i class="fas fa-clipboard-check fa-3x text-muted mb-3"></i>
                        <p class="text-muted">No active emergency requests</p>
                    `;
                    container.appendChild(newNoRequestsMessage);
                }
                return;
            }
            
            // Hide no requests message if it exists
            if (noRequestsMessage) {
                noRequestsMessage.style.display = 'none';
            }
            
            container.innerHTML = requests.map(request => `
                <div class="card emergency-card m-3 priority-${getPriorityClass(request.priority)}" 
                     onclick="showEmergencyDetails(${request.requestId})">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-8">
                                <div class="d-flex align-items-center mb-2">
                                    <h6 class="mb-0 me-2">Emergency Request #${request.requestId}</h6>
                                    <span class="badge bg-${getPriorityColor(request.priority)} me-2">
                                        Priority ${request.priority}
                                    </span>
                                    ${request.medicalHistory ? '<span class="badge medical-history-badge text-white">Medical History Available</span>' : ''}
                                </div>
                                <p class="text-muted mb-1">
                                    <i class="fas fa-user"></i> ${request.patientName} | 
                                    <i class="fas fa-map-marker-alt"></i> ${request.distanceFromHospital} km away
                                </p>
                                <p class="mb-1">${request.injuryDescription || 'Emergency assistance needed'}</p>
                                <small class="text-muted">
                                    <i class="fas fa-clock"></i> ${formatTimeAgo(request.timestamp)}
                                </small>
                            </div>
                            <div class="col-md-4 text-end">
                                <button class="btn btn-accept btn-sm text-white me-2" 
                                        onclick="event.stopPropagation(); quickAccept(${request.requestId})">
                                    <i class="fas fa-check"></i> Quick Accept
                                </button>
                                <button class="btn btn-outline-info btn-sm" onclick="event.stopPropagation(); showEmergencyDetails(${request.requestId})">
                                    <i class="fas fa-eye"></i> Details
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Update dashboard statistics
        function updateDashboardStats(requests) {
            const totalRequests = requests.length;
            const highPriorityRequests = requests.filter(r => r.priority === 1).length;
            
            // Calculate average distance
            const averageDistance = totalRequests > 0 
                ? (requests.reduce((sum, r) => sum + r.distanceFromHospital, 0) / totalRequests).toFixed(1)
                : 0;
            
            // Update display
            document.getElementById('totalRequests').textContent = totalRequests.toString();
            document.getElementById('highPriorityRequests').textContent = highPriorityRequests.toString();
            document.getElementById('averageDistance').textContent = `${averageDistance} km`;
            document.getElementById('lastUpdated').textContent = new Date().toLocaleTimeString();
            document.getElementById('requestCount').textContent = `${totalRequests} requests`;
        }

        // Show emergency details
        async function showEmergencyDetails(requestId) {
            try {
                const response = await fetch(`/api/Emergency/hospital/request/${requestId}?hospitalId=${currentHospitalId}`, {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    }
                });
                
                if (response.ok) {
                    const result = await response.json();
                    const request = result.data;
                    currentRequestId = requestId;
                    
                    document.getElementById('emergencyDetailContent').innerHTML = `
                        <div class="row">
                            <div class="col-md-6">
                                <h6>Patient Information</h6>
                                <p><strong>Name:</strong> ${request.patientName}</p>
                                <p><strong>Distance:</strong> ${request.distanceFromHospital} km</p>
                                <p><strong>Priority:</strong> <span class="badge bg-${getPriorityColor(request.priority)}">Priority ${request.priority}</span></p>
                                <p><strong>Timestamp:</strong> ${formatTimeAgo(request.timestamp)}</p>
                            </div>
                            <div class="col-md-6">
                                <h6>Emergency Details</h6>
                                <p><strong>Injury Description:</strong> ${request.injuryDescription || 'Not provided'}</p>
                                <p><strong>Location:</strong> ${request.userLatitude}, ${request.userLongitude}</p>
                                ${request.injuryPhotoUrl ? `<p><strong>Photo:</strong> Available</p>` : ''}
                            </div>
                        </div>
                        
                        ${request.medicalHistory ? `
                        <hr>
                        <h6>Medical History</h6>
                        <table class="table table-sm">
                            <tr>
                                <td><strong>Age</strong></td>
                                <td>${request.medicalHistory.age || 'Not specified'}</td>
                            </tr>
                            <tr>
                                <td><strong>Weight</strong></td>
                                <td>${request.medicalHistory.weight ? request.medicalHistory.weight + ' kg' : 'Not specified'}</td>
                            </tr>
                            <tr>
                                <td><strong>Height</strong></td>
                                <td>${request.medicalHistory.height ? request.medicalHistory.height + ' cm' : 'Not specified'}</td>
                            </tr>
                            <tr>
                                <td><strong>Gender</strong></td>
                                <td>${request.medicalHistory.gender || 'Not specified'}</td>
                            </tr>
                            <tr>
                                <td><strong>Blood Type</strong></td>
                                <td>${request.medicalHistory.bloodType || 'Not specified'}</td>
                            </tr>
                            <tr>
                                <td><strong>Allergies</strong></td>
                                <td>${request.medicalHistory.hasAllergies ? request.medicalHistory.allergiesDetails || 'Yes' : 'None'}</td>
                            </tr>
                            <tr>
                                <td><strong>Diabetes</strong></td>
                                <td>${request.medicalHistory.hasDiabetes ? request.medicalHistory.diabetesType || 'Yes' : 'No'}</td>
                            </tr>
                            <tr>
                                <td><strong>Blood Pressure</strong></td>
                                <td>${request.medicalHistory.hasHighBloodPressure ? 'High' : request.medicalHistory.hasLowBloodPressure ? 'Low' : 'Normal'}</td>
                            </tr>
                            <tr>
                                <td><strong>Blood Transfusion Objection</strong></td>
                                <td>${request.medicalHistory.hasBloodTransfusionObjection ? 'Yes' : 'No'}</td>
                            </tr>
                            <tr>
                                <td><strong>Medical Conditions</strong></td>
                                <td>${request.medicalHistory.medicalConditions?.join(', ') || 'None listed'}</td>
                            </tr>
                            <tr>
                                <td><strong>Surgery History</strong></td>
                                <td>${request.medicalHistory.hasSurgeryHistory ? 'Yes' : 'No'}</td>
                            </tr>
                        </table>
                        ${request.medicalHistory.hasSurgeryHistory && request.medicalHistory.surgicalHistories?.length > 0 ? `
                        <h6>Surgical History Details</h6>
                        <table class="table table-sm table-striped">
                            <thead>
                                <tr>
                                    <th>Surgery Type</th>
                                    <th>Date</th>
                                    <th>Details</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${request.medicalHistory.surgicalHistories.map(surgery => `
                                    <tr>
                                        <td>${surgery.surgeryType}</td>
                                        <td>${new Date(surgery.date).toLocaleDateString()}</td>
                                        <td>${surgery.details || 'No details provided'}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                        ` : ''}
                        ` : '<p class="text-muted">No medical history available</p>'}
                    `;
                    
                    new bootstrap.Modal(document.getElementById('emergencyDetailModal')).show();
                }
            } catch (error) {
                console.error('Error loading emergency details:', error);
                showAlert('Error loading emergency details', 'danger');
            }
        }

        // Quick accept emergency
        async function quickAccept(requestId) {
            try {
                const response = await fetch('/api/Emergency/hospital/respond', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    },
                    body: JSON.stringify({
                        requestId: requestId,
                        hospitalId: parseInt(currentHospitalId),
                        isAccepted: true,
                        responseMessage: "Emergency request accepted - dispatching ambulance",
                        estimatedResponseTimeMinutes: 15,
                        ambulanceAvailable: true
                    })
                });
                
                if (response.ok) {
                    showAlert('Emergency request accepted successfully!', 'success');
                    refreshDashboard();
                } else {
                    const error = await response.json();
                    showAlert(error.message || 'Error accepting emergency request', 'danger');
                }
            } catch (error) {
                console.error('Error quick accepting emergency:', error);
                showAlert('Error accepting emergency request', 'danger');
            }
        }

        // Respond to emergency (accept/reject)
        function respondToEmergency(isAccepted) {
            document.getElementById('responseRequestId').value = currentRequestId;
            document.getElementById('responseIsAccepted').value = isAccepted;
            
            // Set default message based on action
            document.getElementById('responseMessage').value = isAccepted ? 
                'Emergency request accepted - dispatching ambulance' : 
                'Emergency request rejected - no available resources';
            
            // Show/hide acceptance-specific fields
            const acceptanceFields = document.querySelectorAll('.acceptance-only');
            acceptanceFields.forEach(field => {
                field.style.display = isAccepted ? 'block' : 'none';
            });
            
            // Update modal title
            document.querySelector('#responseModal .modal-title').textContent = 
                isAccepted ? 'Accept Emergency Request' : 'Reject Emergency Request';
            
            bootstrap.Modal.getInstance(document.getElementById('emergencyDetailModal')).hide();
            new bootstrap.Modal(document.getElementById('responseModal')).show();
        }

        // Submit response
        async function submitResponse() {
            try {
                const requestId = document.getElementById('responseRequestId').value;
                const isAccepted = document.getElementById('responseIsAccepted').value === 'true';
                
                const responseData = {
                    requestId: parseInt(requestId),
                    hospitalId: parseInt(currentHospitalId),
                    isAccepted: isAccepted,
                    responseMessage: document.getElementById('responseMessage').value
                };

                // Only include acceptance-specific fields if accepting
                if (isAccepted) {
                    responseData.estimatedResponseTimeMinutes = parseInt(document.getElementById('estimatedTime').value);
                    responseData.ambulanceAvailable = document.getElementById('ambulanceAvailable').value === 'true';
                }
                
                const response = await fetch('/api/Emergency/hospital/respond', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    },
                    body: JSON.stringify(responseData)
                });
                
                if (response.ok) {
                    const result = await response.json();
                    showAlert(result.message, 'success');
                    bootstrap.Modal.getInstance(document.getElementById('responseModal')).hide();
                    
                    // If rejected, immediately remove from current view
                    if (!isAccepted) {
                        removeEmergencyRequestFromView(requestId);
                    }
                    
                    refreshDashboard();
                } else {
                    const error = await response.json();
                    showAlert(error.message || 'Error submitting response', 'danger');
                }
            } catch (error) {
                console.error('Error submitting response:', error);
                showAlert('Error submitting response', 'danger');
            }
        }

        // Remove emergency request from view (for rejections)
        function removeEmergencyRequestFromView(requestId) {
            const requestCards = document.querySelectorAll('.emergency-card');
            requestCards.forEach(card => {
                if (card.innerHTML.includes(`Emergency Request #${requestId}`)) {
                    card.style.transition = 'opacity 0.3s ease';
                    card.style.opacity = '0';
                    setTimeout(() => {
                        card.remove();
                        updateRequestCount();
                    }, 300);
                }
            });
        }

        // Update request count after removal
        function updateRequestCount() {
            const requestCards = document.querySelectorAll('.emergency-card');
            const count = requestCards.length;
            document.getElementById('requestCount').textContent = `${count} requests`;
            document.getElementById('totalRequests').textContent = count.toString();
            
            // Show "no requests" message if empty
            if (count === 0) {
                const container = document.getElementById('emergencyList');
                const noRequestsMessage = document.getElementById('noRequestsMessage');
                container.innerHTML = '';
                container.appendChild(noRequestsMessage);
            }
        }

        // Utility functions
        function getPriorityClass(priority) {
            switch (priority) {
                case 1: return 'high';
                case 2: return 'medium';
                case 3: return 'low';
                default: return 'medium';
            }
        }

        function getPriorityColor(priority) {
            switch (priority) {
                case 1: return 'danger';
                case 2: return 'warning';
                case 3: return 'success';
                default: return 'secondary';
            }
        }

        function formatTimeAgo(timestamp) {
            // Parse the timestamp - handle both ISO format and regular format
            let time;
            if (typeof timestamp === 'string' && timestamp.includes('T')) {
                // ISO format like "2025-05-30T23:04:15.4471982"
                // Try both interpretations and use the one that makes more sense
                
                // Option 1: Parse as UTC (add Z)
                const timeAsUtc = new Date(timestamp + 'Z');
                
                // Option 2: Parse as local time (remove T and parse)
                const localTimeString = timestamp.replace('T', ' ').split('.')[0];
                const timeAsLocal = new Date(localTimeString);
                
                const now = new Date();
                const diffUtc = Math.floor((now - timeAsUtc) / 1000);
                const diffLocal = Math.floor((now - timeAsLocal) / 1000);
                
                // Choose the interpretation that gives a positive, reasonable time difference
                // (between 0 and 24 hours ago)
                if (diffUtc >= 0 && diffUtc < 86400 && (diffLocal < 0 || diffLocal >= 86400)) {
                    time = timeAsUtc;
                } else if (diffLocal >= 0 && diffLocal < 86400 && (diffUtc < 0 || diffUtc >= 86400)) {
                    time = timeAsLocal;
                } else {
                    // If both are reasonable or both are unreasonable, prefer the smaller positive difference
                    if (diffUtc >= 0 && diffLocal >= 0) {
                        time = diffUtc <= diffLocal ? timeAsUtc : timeAsLocal;
                    } else {
                        // Default to local time interpretation
                        time = timeAsLocal;
                    }
                }
            } else {
                // Regular format
                time = new Date(timestamp);
            }
            
            const now = new Date();
            const diff = Math.floor((now - time) / 1000);
            
            // Check if the parsed time seems reasonable
            if (isNaN(time.getTime())) {
                return 'Invalid time';
            }
            
            // If time is in the future, handle gracefully
            if (diff < 0) {
                const absDiff = Math.abs(diff);
                if (absDiff < 60) return 'Just now';
                if (absDiff < 3600) return `${Math.floor(absDiff / 60)} minutes from now`;
                return `${Math.floor(absDiff / 3600)} hours from now`;
            }
            
            if (diff < 60) return `${diff} seconds ago`;
            if (diff < 3600) return `${Math.floor(diff / 60)} minutes ago`;
            if (diff < 86400) return `${Math.floor(diff / 3600)} hours ago`;
            return time.toLocaleDateString() + ' ' + time.toLocaleTimeString();
        }

        function showAlert(message, type) {
            const alertHtml = `
                <div class="alert alert-${type} alert-dismissible fade show position-fixed" 
                     style="top: 20px; right: 20px; z-index: 9999;">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            document.body.insertAdjacentHTML('beforeend', alertHtml);
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                const alert = document.querySelector('.alert');
                if (alert) {
                    new bootstrap.Alert(alert).close();
                }
            }, 5000);
        }
    </script>
</body>
</html> 