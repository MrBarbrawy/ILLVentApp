@{
    ViewData["Title"] = "Hospital Emergency Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Custom CSS -->
    <style>
        :root {
            --primary-color: #2563eb;
            --secondary-color: #f8fafc;
            --accent-color: #06b6d4;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --dark-color: #1e293b;
            --light-gray: #f1f5f9;
            --border-color: #e2e8f0;
            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1);
        }

        * {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            min-height: 100vh;
            color: var(--text-primary);
        }

        .dashboard-header {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--accent-color) 100%);
            color: white;
            border-radius: 20px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: var(--shadow-lg);
            position: relative;
            overflow: hidden;
        }

        .dashboard-header::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 300px;
            height: 300px;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            border-radius: 50%;
            transform: translate(100px, -100px);
        }

        .dashboard-header h1 {
            font-weight: 700;
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
        }

        .dashboard-header p {
            opacity: 0.9;
            font-size: 1.1rem;
            margin-bottom: 0;
        }

        .stats-card {
            background: white;
            border-radius: 16px;
            padding: 1.5rem;
            box-shadow: var(--shadow-md);
            border: 1px solid var(--border-color);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .stats-card:hover {
            transform: translateY(-4px);
            box-shadow: var(--shadow-lg);
        }

        .stats-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: var(--primary-color);
        }

        .stats-card.danger::before { background: var(--danger-color); }
        .stats-card.warning::before { background: var(--warning-color); }
        .stats-card.success::before { background: var(--success-color); }

        .stats-card .icon {
            width: 56px;
            height: 56px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 1rem;
            font-size: 1.5rem;
        }

        .stats-card.primary .icon { background: rgba(37, 99, 235, 0.1); color: var(--primary-color); }
        .stats-card.danger .icon { background: rgba(239, 68, 68, 0.1); color: var(--danger-color); }
        .stats-card.warning .icon { background: rgba(245, 158, 11, 0.1); color: var(--warning-color); }
        .stats-card.success .icon { background: rgba(16, 185, 129, 0.1); color: var(--success-color); }

        .stats-value {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 0.25rem;
        }

        .stats-label {
            color: var(--text-secondary);
            font-weight: 500;
            font-size: 0.875rem;
        }

        .emergency-card {
            background: white;
            border-radius: 16px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            box-shadow: var(--shadow-md);
            border: 1px solid var(--border-color);
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

        .emergency-card:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .emergency-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 6px;
            height: 100%;
        }

        .emergency-card.priority-high::before { background: var(--danger-color); }
        .emergency-card.priority-medium::before { background: var(--warning-color); }
        .emergency-card.priority-low::before { background: var(--success-color); }

        .priority-badge {
            padding: 0.375rem 0.75rem;
            border-radius: 9999px;
            font-weight: 600;
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 0.025em;
        }

        .priority-high { background: rgba(239, 68, 68, 0.1); color: var(--danger-color); }
        .priority-medium { background: rgba(245, 158, 11, 0.1); color: var(--warning-color); }
        .priority-low { background: rgba(16, 185, 129, 0.1); color: var(--success-color); }

        .medical-history-badge {
            background: linear-gradient(135deg, #8b5cf6, #06b6d4);
            color: white;
            padding: 0.375rem 0.75rem;
            border-radius: 9999px;
            font-weight: 600;
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 0.025em;
        }

        .btn-modern {
            border-radius: 12px;
            font-weight: 600;
            padding: 0.75rem 1.5rem;
            transition: all 0.3s ease;
            border: none;
            font-size: 0.875rem;
        }

        .btn-accept {
            background: linear-gradient(135deg, var(--success-color), #059669);
            color: white;
        }

        .btn-accept:hover {
            background: linear-gradient(135deg, #059669, #047857);
            transform: translateY(-1px);
            box-shadow: var(--shadow-md);
        }

        .btn-reject {
            background: linear-gradient(135deg, var(--danger-color), #dc2626);
            color: white;
        }

        .btn-reject:hover {
            background: linear-gradient(135deg, #dc2626, #b91c1c);
            transform: translateY(-1px);
            box-shadow: var(--shadow-md);
        }

        .btn-details {
            background: white;
            color: var(--primary-color);
            border: 2px solid var(--primary-color);
        }

        .btn-details:hover {
            background: var(--primary-color);
            color: white;
            transform: translateY(-1px);
        }

        .real-time-indicator {
            animation: pulse 2s infinite;
            background: var(--success-color);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 9999px;
            font-weight: 600;
            font-size: 0.875rem;
        }

        @@keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }

        .main-content {
            background: white;
            border-radius: 20px;
            box-shadow: var(--shadow-lg);
            border: 1px solid var(--border-color);
        }

        .content-header {
            padding: 1.5rem 2rem;
            border-bottom: 1px solid var(--border-color);
            background: linear-gradient(135deg, #fafbff 0%, #f8fafc 100%);
            border-radius: 20px 20px 0 0;
        }

        .emergency-list {
            max-height: 600px;
            overflow-y: auto;
            padding: 1rem;
        }

        .emergency-list::-webkit-scrollbar {
            width: 6px;
        }

        .emergency-list::-webkit-scrollbar-track {
            background: var(--light-gray);
            border-radius: 3px;
        }

        .emergency-list::-webkit-scrollbar-thumb {
            background: var(--text-secondary);
            border-radius: 3px;
        }

        .no-requests {
            text-align: center;
            padding: 4rem 2rem;
            color: var(--text-secondary);
        }

        .no-requests i {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }

        .hospital-select {
            border-radius: 12px;
            border: 2px solid var(--border-color);
            padding: 0.75rem 1rem;
            font-weight: 500;
            background: white;
            color: var(--text-primary);
            min-width: 250px;
        }

        .hospital-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
            outline: none;
        }

        .refresh-btn {
            background: white;
            color: var(--primary-color);
            border: 2px solid var(--primary-color);
            border-radius: 12px;
            padding: 0.75rem 1.5rem;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .refresh-btn:hover {
            background: var(--primary-color);
            color: white;
            transform: translateY(-1px);
        }

        .modal-content {
            border-radius: 20px;
            border: none;
            box-shadow: var(--shadow-lg);
        }

        .modal-header {
            background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
            color: white;
            border-radius: 20px 20px 0 0;
            border-bottom: none;
        }

        .medical-history-table {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: var(--shadow-sm);
        }

        .medical-history-table td {
            padding: 0.75rem 1rem;
            border-bottom: 1px solid var(--border-color);
        }

        .medical-history-table td:first-child {
            background: var(--light-gray);
            font-weight: 600;
            color: var(--text-primary);
        }

        .alert-modern {
            border-radius: 12px;
            border: none;
            font-weight: 500;
            box-shadow: var(--shadow-md);
        }

        .patient-info-card {
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1rem;
        }

        .info-item {
            display: flex;
            align-items: center;
            margin-bottom: 0.75rem;
        }

        .info-item i {
            width: 24px;
            color: var(--primary-color);
            margin-right: 0.75rem;
        }

        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }

        @@keyframes spin {
            to { transform: rotate(360deg); }
        }

        .dashboard-header .d-flex {
            gap: 1rem;
        }

        .emergency-card .d-flex.flex-column {
            gap: 0.5rem;
        }

        .emergency-card .d-flex.flex-column .btn {
            margin-bottom: 0.5rem;
        }

        .emergency-card .d-flex.flex-column .btn:last-child {
            margin-bottom: 0;
        }
    </style>
</head>
<body>
    <div class="container-fluid py-4">
        <!-- Header -->
        <div class="dashboard-header">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h1><i class="fas fa-hospital-alt me-3"></i>Emergency Command Center</h1>
                    <p>Real-time emergency response coordination system</p>
                </div>
                <div class="col-md-4 text-end">
                    <div class="d-flex align-items-center justify-content-end">
                        <span class="real-time-indicator me-3">
                            <i class="fas fa-wifi me-2"></i>Live
                        </span>
                        <select id="hospitalSelect" class="hospital-select me-3">
                            <option value="">Select Hospital</option>
                        </select>
                        <button class="refresh-btn" onclick="refreshDashboard()">
                            <i class="fas fa-sync-alt me-2"></i>Refresh
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Statistics Cards -->
        <div class="row mb-4" id="statsSection">
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="stats-card primary">
                    <div class="icon">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <div class="stats-value" id="totalRequests">0</div>
                    <div class="stats-label">Active Requests</div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="stats-card danger">
                    <div class="icon">
                        <i class="fas fa-fire"></i>
                    </div>
                    <div class="stats-value" id="highPriorityRequests">0</div>
                    <div class="stats-label">Critical Cases</div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="stats-card warning">
                    <div class="icon">
                        <i class="fas fa-map-marker-alt"></i>
                    </div>
                    <div class="stats-value" id="averageDistance">0 km</div>
                    <div class="stats-label">Average Distance</div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="stats-card success">
                    <div class="icon">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="stats-value" id="lastUpdated">--:--</div>
                    <div class="stats-label">Last Updated</div>
                </div>
            </div>
        </div>

        <!-- Emergency Requests List -->
        <div class="row">
            <div class="col-12">
                <div class="main-content">
                    <div class="content-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h5 class="mb-1 fw-bold"><i class="fas fa-ambulance text-danger me-2"></i>Emergency Requests</h5>
                                <p class="text-muted mb-0">Active emergency requests requiring immediate attention</p>
                            </div>
                            <span class="badge bg-primary fs-6 px-3 py-2" id="requestCount">0 requests</span>
                        </div>
                    </div>
                    <div class="emergency-list" id="emergencyList">
                        <!-- Emergency requests will be loaded here -->
                        <div class="no-requests" id="noRequestsMessage">
                            <i class="fas fa-clipboard-check"></i>
                            <h6>No Active Emergency Requests</h6>
                            <p class="mb-0">All emergency requests have been handled. Great work!</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Emergency Request Detail Modal -->
    <div class="modal fade" id="emergencyDetailModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Emergency Request Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="emergencyDetailContent">
                    <!-- Detail content will be loaded here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-modern" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Close
                    </button>
                    <button type="button" class="btn btn-reject btn-modern" onclick="respondToEmergency(false)">
                        <i class="fas fa-ban me-2"></i>Reject Request
                    </button>
                    <button type="button" class="btn btn-accept btn-modern" onclick="respondToEmergency(true)">
                        <i class="fas fa-check me-2"></i>Accept Emergency
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Response Modal -->
    <div class="modal fade" id="responseModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Emergency Response</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="responseForm">
                        <input type="hidden" id="responseRequestId">
                        <input type="hidden" id="responseIsAccepted">
                        
                        <div class="mb-3">
                            <label class="form-label">Response Message</label>
                            <textarea class="form-control" id="responseMessage" rows="3" 
                                placeholder="Enter response message..."></textarea>
                        </div>
                        
                        <div class="row acceptance-only">
                            <div class="col-md-6">
                                <label class="form-label">Estimated Response Time (minutes)</label>
                                <input type="number" class="form-control" id="estimatedTime" min="1" max="120" value="15">
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Ambulance Available</label>
                                <select class="form-select" id="ambulanceAvailable">
                                    <option value="true">Yes</option>
                                    <option value="false">No</option>
                                </select>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-modern" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-accept btn-modern" onclick="submitResponse()">
                        <i class="fas fa-paper-plane me-2"></i>Submit Response
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
    
    <script>
        // Global variables
        let currentHospitalId = null;
        let connection = null;
        let currentRequestId = null;

        // Check authentication and authorization on page load
        function checkAuthentication() {
            const token = localStorage.getItem('authToken');
            const role = localStorage.getItem('userRole');
            
            if (!token) {
                alert('Authentication required. Redirecting to login...');
                window.location.href = '/HospitalView/Login';
                return false;
            }
            
            if (role !== 'Hospital' && role !== 'Admin') {
                alert(`Access denied. Hospital staff credentials required. Your role: ${role || 'Unknown'}`);
                window.location.href = '/HospitalView/Login';
                return false;
            }
            
            return true;
        }

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            // Check authentication first
            if (!checkAuthentication()) {
                return;
            }
            
            loadHospitals();
            setupSignalR();
            
            // Auto-refresh every 30 seconds
            setInterval(refreshDashboard, 30000);
        });

        // Load available hospitals
        async function loadHospitals() {
            try {
                const token = localStorage.getItem('authToken');
                console.log('Auth token exists:', !!token);
                console.log('User role:', localStorage.getItem('userRole'));
                
                const response = await fetch('/api/Emergency/available-hospitals', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                console.log('Response status:', response.status);
                
                if (response.ok) {
                    const result = await response.json();
                    console.log('Hospitals loaded:', result);
                    const select = document.getElementById('hospitalSelect');
                    
                    result.data.forEach(hospital => {
                        const option = document.createElement('option');
                        option.value = hospital.hospitalId;
                        option.textContent = hospital.name;
                        select.appendChild(option);
                    });
                    
                    // Auto-select first hospital if available
                    if (result.data.length > 0) {
                        select.value = result.data[0].hospitalId;
                        currentHospitalId = result.data[0].hospitalId;
                        console.log('Auto-selected hospital:', currentHospitalId, result.data[0].name);
                        refreshDashboard();
                    }
                } else {
                    const errorText = await response.text();
                    console.error('Error response:', response.status, errorText);
                    
                    if (response.status === 401) {
                        showAlert('Authentication failed. Please login again.', 'danger');
                        setTimeout(() => {
                            window.location.href = '/HospitalView/Login';
                        }, 2000);
                    } else {
                        showAlert(`Error loading hospitals: ${response.status}`, 'danger');
                    }
                }
            } catch (error) {
                console.error('Error loading hospitals:', error);
                showAlert('Error loading hospitals', 'danger');
            }
        }

        // Setup SignalR connection
        async function setupSignalR() {
            try {
                connection = new signalR.HubConnectionBuilder()
                    .withUrl("/emergencyHub", {
                        accessTokenFactory: () => localStorage.getItem('authToken')
                    })
                    .build();

                // Handle new emergency requests
                connection.on("NewEmergencyRequest", function (data) {
                    console.log("New emergency request received:", data);
                    refreshDashboard();
                    showAlert(`New emergency request from ${data.PatientLocation?.UserLatitude}, ${data.PatientLocation?.UserLongitude}`, 'warning');
                });

                // Handle hospital accepted responses
                connection.on("HospitalAccepted", function (data) {
                    console.log("Hospital accepted emergency:", data);
                    refreshDashboard();
                });

                await connection.start();
                console.log("SignalR connected");
                
                // Join hospital notifications group
                if (currentHospitalId) {
                    await connection.invoke("JoinHospitalNotifications", currentHospitalId);
                }
            } catch (error) {
                console.error("SignalR connection failed:", error);
            }
        }

        // Hospital selection change
        document.getElementById('hospitalSelect').addEventListener('change', function() {
            currentHospitalId = this.value;
            console.log('Hospital changed to:', currentHospitalId, 'Hospital name:', this.options[this.selectedIndex].text);
            
            if (currentHospitalId) {
                refreshDashboard();
                
                // Join new hospital notifications group
                if (connection) {
                    connection.invoke("JoinHospitalNotifications", parseInt(currentHospitalId));
                }
            }
        });

        // Refresh dashboard data
        async function refreshDashboard() {
            if (!currentHospitalId) return;
            
            try {
                // Load statistics
                await loadDashboardStats();
                
                // Load emergency requests
                await loadEmergencyRequests();
                
                // Update last updated time
                document.getElementById('lastUpdated').textContent = new Date().toLocaleTimeString();
                
            } catch (error) {
                console.error('Error refreshing dashboard:', error);
                showAlert('Error refreshing dashboard', 'danger');
            }
        }

        // Load dashboard statistics
        async function loadDashboardStats() {
            try {
                // Note: Dashboard stats endpoint doesn't exist yet, skip for now
                // const response = await fetch(`/api/Emergency/hospital/stats/${currentHospitalId}`, {
                //     headers: {
                //         'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                //     }
                // });
                
                // For now, just set placeholder values
                document.getElementById('totalRequests').textContent = 'N/A';
                document.getElementById('highPriorityRequests').textContent = 'N/A';
                document.getElementById('averageDistance').textContent = 'N/A';
            } catch (error) {
                console.error('Error loading dashboard stats:', error);
            }
        }

        // Load emergency requests
        async function loadEmergencyRequests() {
            try {
                console.log('Loading emergency requests for hospital ID:', currentHospitalId);
                
                const response = await fetch(`/api/Emergency/hospital/requests?hospitalId=${currentHospitalId}&radiusKm=20`, {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    }
                });
                
                if (response.ok) {
                    const result = await response.json();
                    console.log('Emergency requests loaded:', result);
                    console.log('Requests data:', result.data);
                    
                    displayEmergencyRequests(result.data);
                    document.getElementById('requestCount').textContent = `${result.count} requests`;
                } else {
                    console.error('Error loading emergency requests:', response.status);
                }
            } catch (error) {
                console.error('Error loading emergency requests:', error);
            }
        }

        // Display emergency requests
        function displayEmergencyRequests(requests) {
            const container = document.getElementById('emergencyList');
            const noRequestsMessage = document.getElementById('noRequestsMessage');
            
            // Update statistics
            updateDashboardStats(requests);
            
            if (requests.length === 0) {
                container.innerHTML = '';
                if (noRequestsMessage) {
                    container.appendChild(noRequestsMessage);
                } else {
                    // Create the no requests message if it doesn't exist
                    const newNoRequestsMessage = document.createElement('div');
                    newNoRequestsMessage.id = 'noRequestsMessage';
                    newNoRequestsMessage.className = 'no-requests';
                    newNoRequestsMessage.innerHTML = `
                        <i class="fas fa-clipboard-check"></i>
                        <h6>No Active Emergency Requests</h6>
                        <p class="mb-0">All emergency requests have been handled. Great work!</p>
                    `;
                    container.appendChild(newNoRequestsMessage);
                }
                return;
            }
            
            // Hide no requests message if it exists
            if (noRequestsMessage) {
                noRequestsMessage.style.display = 'none';
            }
            
            container.innerHTML = requests.map(request => `
                <div class="emergency-card priority-${getPriorityClass(request.priority)}"
                     onclick="showEmergencyDetails(${request.requestId})">
                    <div class="row align-items-center">
                        <div class="col-lg-8">
                            <div class="d-flex align-items-center mb-2">
                                <h6 class="mb-0 me-3 fw-bold">Emergency Request #${request.requestId}</h6>
                                <span class="priority-badge priority-${getPriorityClass(request.priority)}">
                                    Priority ${request.priority}
                                </span>
                                ${request.medicalHistory ? '<span class="medical-history-badge ms-2">Medical History Available</span>' : ''}
                            </div>
                            <div class="info-item mb-2">
                                <i class="fas fa-user-injured"></i>
                                <span><strong>${request.patientName}</strong> • ${request.distanceFromHospital} km away</span>
                            </div>
                            <div class="info-item mb-2">
                                <i class="fas fa-clipboard-list"></i>
                                <span>${request.injuryDescription || 'Emergency assistance needed'}</span>
                            </div>
                            <div class="info-item mb-0">
                                <i class="fas fa-clock"></i>
                                <span class="text-muted">${formatTimeAgo(request.timestamp)}</span>
                            </div>
                        </div>
                        <div class="col-lg-4 text-end">
                            <div class="d-flex flex-column">
                                <button class="btn btn-accept btn-modern" 
                                        onclick="event.stopPropagation(); quickAccept(${request.requestId})">
                                    <i class="fas fa-check me-2"></i>Quick Accept
                                </button>
                                <button class="btn btn-details btn-modern" 
                                        onclick="event.stopPropagation(); showEmergencyDetails(${request.requestId})">
                                    <i class="fas fa-eye me-2"></i>View Details
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Update dashboard statistics
        function updateDashboardStats(requests) {
            const totalRequests = requests.length;
            const highPriorityRequests = requests.filter(r => r.priority === 1).length;
            
            // Calculate average distance
            const averageDistance = totalRequests > 0 
                ? (requests.reduce((sum, r) => sum + r.distanceFromHospital, 0) / totalRequests).toFixed(1)
                : 0;
            
            // Update display
            document.getElementById('totalRequests').textContent = totalRequests.toString();
            document.getElementById('highPriorityRequests').textContent = highPriorityRequests.toString();
            document.getElementById('averageDistance').textContent = `${averageDistance} km`;
            document.getElementById('lastUpdated').textContent = new Date().toLocaleTimeString();
            document.getElementById('requestCount').textContent = `${totalRequests} requests`;
        }

        // Show emergency details
        async function showEmergencyDetails(requestId) {
            try {
                const response = await fetch(`/api/Emergency/hospital/request/${requestId}?hospitalId=${currentHospitalId}`, {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    }
                });

                if (response.ok) {
                    const result = await response.json();
                    const request = result.data;
                    currentRequestId = requestId;

                    document.getElementById('emergencyDetailContent').innerHTML = `
                        <div class="patient-info-card">
                            <div class="row">
                                <div class="col-md-6">
                                    <h6 class="fw-bold mb-3"><i class="fas fa-user-injured text-primary me-2"></i>Patient Information</h6>
                                    <div class="info-item">
                                        <i class="fas fa-user"></i>
                                        <span><strong>Name:</strong> ${request.patientName}</span>
                                    </div>
                                    <div class="info-item">
                                        <i class="fas fa-map-marker-alt"></i>
                                        <span><strong>Distance:</strong> ${request.distanceFromHospital} km</span>
                                    </div>
                                    <div class="info-item">
                                        <i class="fas fa-exclamation-triangle"></i>
                                        <span><strong>Priority:</strong> <span class="priority-badge priority-${getPriorityClass(request.priority)} ms-2">Priority ${request.priority}</span></span>
                                    </div>
                                    <div class="info-item mb-0">
                                        <i class="fas fa-clock"></i>
                                        <span><strong>Reported:</strong> ${formatTimeAgo(request.timestamp)}</span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <h6 class="fw-bold mb-3"><i class="fas fa-clipboard-list text-primary me-2"></i>Emergency Details</h6>
                                    <div class="info-item">
                                        <i class="fas fa-notes-medical"></i>
                                        <span><strong>Description:</strong> ${request.injuryDescription || 'Not provided'}</span>
                                    </div>
                                    <div class="info-item">
                                        <i class="fas fa-location-dot"></i>
                                        <span><strong>Coordinates:</strong> ${request.userLatitude}, ${request.userLongitude}</span>
                                    </div>
                                    ${request.injuryPhotoUrl ? `
                                    <div class="info-item mb-0">
                                        <i class="fas fa-camera"></i>
                                        <span><strong>Photo:</strong> <span class="badge bg-info">Available</span></span>
                                    </div>
                                    ` : ''}
                                </div>
                            </div>
                        </div>

                        ${request.medicalHistory ? `
                        <div class="mt-4">
                            <h6 class="fw-bold mb-3"><i class="fas fa-heartbeat text-danger me-2"></i>Medical History</h6>
                            <div class="medical-history-table table-responsive">
                                <table class="table table-borderless mb-0">
                                    <tr>
                                        <td class="fw-bold">Age</td>
                                        <td>${request.medicalHistory.age || 'Not specified'}</td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold">Weight</td>
                                        <td>${request.medicalHistory.weight ? request.medicalHistory.weight + ' kg' : 'Not specified'}</td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold">Height</td>
                                        <td>${request.medicalHistory.height ? request.medicalHistory.height + ' cm' : 'Not specified'}</td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold">Gender</td>
                                        <td>${request.medicalHistory.gender || 'Not specified'}</td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold">Blood Type</td>
                                        <td>${request.medicalHistory.bloodType ? `<span class="badge bg-danger">${request.medicalHistory.bloodType}</span>` : 'Not specified'}</td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold">Allergies</td>
                                        <td>${request.medicalHistory.hasAllergies ? 
                                            `<span class="badge bg-warning text-dark">${request.medicalHistory.allergiesDetails || 'Yes'}</span>` : 
                                            '<span class="badge bg-success">None</span>'}</td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold">Diabetes</td>
                                        <td>${request.medicalHistory.hasDiabetes ? 
                                            `<span class="badge bg-warning text-dark">${request.medicalHistory.diabetesType || 'Yes'}</span>` : 
                                            '<span class="badge bg-success">No</span>'}</td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold">Blood Pressure</td>
                                        <td>${request.medicalHistory.hasHighBloodPressure ? 
                                            '<span class="badge bg-danger">High</span>' : 
                                            request.medicalHistory.hasLowBloodPressure ? 
                                            '<span class="badge bg-info">Low</span>' : 
                                            '<span class="badge bg-success">Normal</span>'}</td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold">Blood Transfusion Objection</td>
                                        <td>${request.medicalHistory.hasBloodTransfusionObjection ? 
                                            '<span class="badge bg-danger">Yes</span>' : 
                                            '<span class="badge bg-success">No</span>'}</td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold">Medical Conditions</td>
                                        <td>${request.medicalHistory.medicalConditions?.length > 0 ? 
                                            request.medicalHistory.medicalConditions.map(condition => 
                                                `<span class="badge bg-info me-1">${condition}</span>`
                                            ).join('') : 
                                            '<span class="badge bg-success">None listed</span>'}</td>
                                    </tr>
                                    <tr>
                                        <td class="fw-bold">Surgery History</td>
                                        <td>${request.medicalHistory.hasSurgeryHistory ? 
                                            '<span class="badge bg-warning text-dark">Yes</span>' : 
                                            '<span class="badge bg-success">No</span>'}</td>
                                    </tr>
                                </table>
                            </div>
                            ${request.medicalHistory.hasSurgeryHistory && request.medicalHistory.surgicalHistories?.length > 0 ? `
                            <div class="mt-4">
                                <h6 class="fw-bold mb-3"><i class="fas fa-cut text-warning me-2"></i>Surgical History Details</h6>
                                <div class="medical-history-table table-responsive">
                                    <table class="table table-borderless mb-0">
                                        <thead>
                                            <tr class="bg-light">
                                                <th class="fw-bold">Surgery Type</th>
                                                <th class="fw-bold">Date</th>
                                                <th class="fw-bold">Details</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            ${request.medicalHistory.surgicalHistories.map(surgery => `
                                                <tr>
                                                    <td><span class="badge bg-primary">${surgery.surgeryType}</span></td>
                                                    <td>${new Date(surgery.date).toLocaleDateString()}</td>
                                                    <td>${surgery.details || 'No details provided'}</td>
                                                </tr>
                                            `).join('')}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            ` : ''}
                        </div>
                        ` : `
                        <div class="mt-4 text-center py-4">
                            <i class="fas fa-exclamation-triangle text-warning fa-2x mb-3"></i>
                            <h6 class="text-muted">No Medical History Available</h6>
                            <p class="text-muted mb-0">Patient medical history is not accessible for this emergency request.</p>
                        </div>
                        `}
                    `;

                    new bootstrap.Modal(document.getElementById('emergencyDetailModal')).show();
                }
            } catch (error) {
                console.error('Error loading emergency details:', error);
                showAlert('Error loading emergency details', 'danger');
            }
        }

        // Quick accept emergency
        async function quickAccept(requestId) {
            try {
                const response = await fetch('/api/Emergency/hospital/respond', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    },
                    body: JSON.stringify({
                        requestId: requestId,
                        hospitalId: parseInt(currentHospitalId),
                        isAccepted: true,
                        responseMessage: "Emergency request accepted - dispatching ambulance",
                        estimatedResponseTimeMinutes: 15,
                        ambulanceAvailable: true
                    })
                });
                
                if (response.ok) {
                    showAlert('Emergency request accepted successfully!', 'success');
                    refreshDashboard();
                } else {
                    const error = await response.json();
                    showAlert(error.message || 'Error accepting emergency request', 'danger');
                }
            } catch (error) {
                console.error('Error quick accepting emergency:', error);
                showAlert('Error accepting emergency request', 'danger');
            }
        }

        // Respond to emergency (accept/reject)
        function respondToEmergency(isAccepted) {
            document.getElementById('responseRequestId').value = currentRequestId;
            document.getElementById('responseIsAccepted').value = isAccepted;
            
            // Set default message based on action
            document.getElementById('responseMessage').value = isAccepted ? 
                'Emergency request accepted - dispatching ambulance' : 
                'Emergency request rejected - no available resources';
            
            // Show/hide acceptance-specific fields
            const acceptanceFields = document.querySelectorAll('.acceptance-only');
            acceptanceFields.forEach(field => {
                field.style.display = isAccepted ? 'block' : 'none';
            });
            
            // Update modal title
            document.querySelector('#responseModal .modal-title').textContent = 
                isAccepted ? 'Accept Emergency Request' : 'Reject Emergency Request';
            
            bootstrap.Modal.getInstance(document.getElementById('emergencyDetailModal')).hide();
            new bootstrap.Modal(document.getElementById('responseModal')).show();
        }

        // Submit response
        async function submitResponse() {
            try {
                const requestId = document.getElementById('responseRequestId').value;
                const isAccepted = document.getElementById('responseIsAccepted').value === 'true';
                
                const responseData = {
                    requestId: parseInt(requestId),
                    hospitalId: parseInt(currentHospitalId),
                    isAccepted: isAccepted,
                    responseMessage: document.getElementById('responseMessage').value
                };

                // Only include acceptance-specific fields if accepting
                if (isAccepted) {
                    responseData.estimatedResponseTimeMinutes = parseInt(document.getElementById('estimatedTime').value);
                    responseData.ambulanceAvailable = document.getElementById('ambulanceAvailable').value === 'true';
                }
                
                const response = await fetch('/api/Emergency/hospital/respond', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    },
                    body: JSON.stringify(responseData)
                });
                
                if (response.ok) {
                    const result = await response.json();
                    showAlert(result.message, 'success');
                    bootstrap.Modal.getInstance(document.getElementById('responseModal')).hide();
                    
                    // If rejected, immediately remove from current view
                    if (!isAccepted) {
                        removeEmergencyRequestFromView(requestId);
                    }
                    
                    refreshDashboard();
                } else {
                    const error = await response.json();
                    showAlert(error.message || 'Error submitting response', 'danger');
                }
            } catch (error) {
                console.error('Error submitting response:', error);
                showAlert('Error submitting response', 'danger');
            }
        }

        // Remove emergency request from view (for rejections)
        function removeEmergencyRequestFromView(requestId) {
            const requestCards = document.querySelectorAll('.emergency-card');
            requestCards.forEach(card => {
                if (card.innerHTML.includes(`Emergency Request #${requestId}`)) {
                    card.style.transition = 'opacity 0.3s ease';
                    card.style.opacity = '0';
                    setTimeout(() => {
                        card.remove();
                        updateRequestCount();
                    }, 300);
                }
            });
        }

        // Update request count after removal
        function updateRequestCount() {
            const requestCards = document.querySelectorAll('.emergency-card');
            const count = requestCards.length;
            document.getElementById('requestCount').textContent = `${count} requests`;
            document.getElementById('totalRequests').textContent = count.toString();
            
            // Show "no requests" message if empty
            if (count === 0) {
                const container = document.getElementById('emergencyList');
                const noRequestsMessage = document.getElementById('noRequestsMessage');
                container.innerHTML = '';
                container.appendChild(noRequestsMessage);
            }
        }

        // Utility functions
        function getPriorityClass(priority) {
            switch (priority) {
                case 1: return 'high';
                case 2: return 'medium';
                case 3: return 'low';
                default: return 'medium';
            }
        }

        function getPriorityColor(priority) {
            switch (priority) {
                case 1: return 'danger';
                case 2: return 'warning';
                case 3: return 'success';
                default: return 'secondary';
            }
        }

        function formatTimeAgo(timestamp) {
            // Parse the timestamp - handle both ISO format and regular format
            let time;
            if (typeof timestamp === 'string' && timestamp.includes('T')) {
                // ISO format like "2025-05-30T23:04:15.4471982"
                // Try both interpretations and use the one that makes more sense
                
                // Option 1: Parse as UTC (add Z)
                const timeAsUtc = new Date(timestamp + 'Z');
                
                // Option 2: Parse as local time (remove T and parse)
                const localTimeString = timestamp.replace('T', ' ').split('.')[0];
                const timeAsLocal = new Date(localTimeString);
                
                const now = new Date();
                const diffUtc = Math.floor((now - timeAsUtc) / 1000);
                const diffLocal = Math.floor((now - timeAsLocal) / 1000);
                
                // Choose the interpretation that gives a positive, reasonable time difference
                // (between 0 and 24 hours ago)
                if (diffUtc >= 0 && diffUtc < 86400 && (diffLocal < 0 || diffLocal >= 86400)) {
                    time = timeAsUtc;
                } else if (diffLocal >= 0 && diffLocal < 86400 && (diffUtc < 0 || diffUtc >= 86400)) {
                    time = timeAsLocal;
                } else {
                    // If both are reasonable or both are unreasonable, prefer the smaller positive difference
                    if (diffUtc >= 0 && diffLocal >= 0) {
                        time = diffUtc <= diffLocal ? timeAsUtc : timeAsLocal;
                    } else {
                        // Default to local time interpretation
                        time = timeAsLocal;
                    }
                }
            } else {
                // Regular format
                time = new Date(timestamp);
            }
            
            const now = new Date();
            const diff = Math.floor((now - time) / 1000);
            
            // Check if the parsed time seems reasonable
            if (isNaN(time.getTime())) {
                return 'Invalid time';
            }
            
            // If time is in the future, handle gracefully
            if (diff < 0) {
                const absDiff = Math.abs(diff);
                if (absDiff < 60) return 'Just now';
                if (absDiff < 3600) return `${Math.floor(absDiff / 60)} minutes from now`;
                return `${Math.floor(absDiff / 3600)} hours from now`;
            }
            
            if (diff < 60) return `${diff} seconds ago`;
            if (diff < 3600) return `${Math.floor(diff / 60)} minutes ago`;
            if (diff < 86400) return `${Math.floor(diff / 3600)} hours ago`;
            return time.toLocaleDateString() + ' ' + time.toLocaleTimeString();
        }

        function showAlert(message, type) {
            const alertHtml = `
                <div class="alert alert-${type} alert-modern alert-dismissible fade show position-fixed"
                     style="top: 20px; right: 20px; z-index: 9999; min-width: 300px;">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'danger' ? 'exclamation-triangle' : type === 'warning' ? 'exclamation-circle' : 'info-circle'} me-2"></i>
                        <span>${message}</span>
                    </div>
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            document.body.insertAdjacentHTML('beforeend', alertHtml);
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                const alert = document.querySelector('.alert');
                if (alert) {
                    new bootstrap.Alert(alert).close();
                }
            }, 5000);
        }
    </script>
</body>
</html> 